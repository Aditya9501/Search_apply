from selenium import webdriver
import pandas as pd
import datetime
import time
from time import sleep
from selenium.webdriver.common.by import By
from selenium.webdriver import ActionChains
from selenium.webdriver.support.wait import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.common.exceptions import TimeoutException, NoSuchElementException
import os
import multiprocessing
from collections import Counter

class NaukriSearch:
    
    def __init__(self, user, passcode, jobdesgn, yrsexp, save_path):
        self.user = user
        self.passcode = passcode
        self.jobdesgn = jobdesgn
        self.yrsexp = yrsexp
        self.save_path = save_path
        self.naukri = "https://www.naukri.com"
        self.log_in_layer = (By.XPATH, "//a[@id='login_Layer']")
        self.username_details = (By.XPATH, "//input[@placeholder='Enter your active Email ID / Username']")
        self.password_details = (By.XPATH, "//input[@placeholder='Enter your password']")
        self.log_in_click = (By.XPATH, "//button[@type='submit']")
        self.type_job_loc = (By.XPATH,"//span[@class='nI-gNb-sb__placeholder']")
        self.job_type_loc = (By.XPATH, "//input[@placeholder='Enter keyword / designation / companies']")
        self.search_loc =(By.XPATH, "//span[normalize-space()='Search']")
        self.num_job_posting = (By.XPATH, "//div[@id='jobs-list-header']/div[1]/span[1]")
        self.freshness = (By.XPATH,"//button[@id='filter-freshness']")
        self.one_day = (By.XPATH,"//li[@title='Last 1 day']")
        self.jobs_wait = (By.XPATH, "(//div[contains(@class,'cust-job-tuple layout-wrapper lay-2 sjw__tuple')])")
        self.next_button = (By.XPATH, "//a[@class='styles_btn-secondary__2AsIP']")
        self.driver = webdriver.Chrome()
        self.driver.get(self.naukri)
        self.wait = WebDriverWait(self.driver,15)
        self.chain = ActionChains(self.driver)
        
    def login_account(self):
        self.wait.until(EC.element_to_be_clickable(self.log_in_layer)).click()
        self.wait.until(EC.visibility_of_element_located(self.username_details)).send_keys(self.user)
        self.wait.until(EC.visibility_of_element_located(self.password_details)).send_keys(self.passcode)
        self.wait.until(EC.element_to_be_clickable(self.log_in_click)).click()
            
    def get_latest_job_df(self):
        self.login_account()
        self.wait.until(EC.element_to_be_clickable(self.type_job_loc)).click()
        self.wait.until(EC.element_to_be_clickable(self.job_type_loc)).send_keys(self.jobdesgn)
        self.wait.until(EC.element_to_be_clickable(self.search_loc)).click()
        
        curl = self.driver.current_url
        new_curl = curl+f'&experience={self.yrsexp}'
        self.driver.get(new_curl)

        self.wait.until(EC.element_to_be_clickable(self.freshness)).click()
        self.wait.until(EC.element_to_be_clickable(self.one_day)).click()
        
        self.wait.until(EC.visibility_of_element_located(self.num_job_posting))
        time.sleep(2)
        total_listing = self.driver.find_element(*self.num_job_posting).text
        op = int(total_listing.split(" ")[-1])//int(total_listing.split(' ')[2])
        rem = int(total_listing.split(" ")[-1])%int(total_listing.split(' ')[2])
        pages = op + 1 if rem!=0 else op
        
        curl1 = self.driver.current_url
        bef = curl1.split('?')[0]
        aft = curl1.split('?')[1]
        
        new_curls = [curl1]
        for up in range(2,pages+1):
            new_curls.append(bef+f'-{up}?'+aft)
        
        keyword_title = ["Data Analyst", "Data Scientist","Python","Machine Learning","Artificial Intelligence", "Data Science","Visusalization",
                        "Deep Learning","Natural Language","Computer Vision","Data Mining","Power BI", "Tableau","Data Analysis","Data Modeling",
                        "Data Wrangling","Business Analyst"]
        keyword_title2 = ["ML", "AI", "CV", "NLP","SQL"]
        not_keywords = ["Developer","Django","Stack","Config","Server","Admin","Associate","Content","Female"]
        
        job_link = []
        job_title = []
        print_err1 = []
        
        try:
            i = 0
            while i < len(new_curls):
                
                self.driver.get(new_curls[i])
                self.wait.until(EC.presence_of_all_elements_located(self.jobs_wait))
                jobs = self.driver.find_elements(*self.jobs_wait)

                try:
                    for j in range(len(jobs)):
                        job_posting = self.driver.find_element(By.XPATH, f"(//div[contains(@class,'cust-job-tuple layout-wrapper lay-2 sjw__tuple')])[{j+1}]/div[1]/a").text

                        if (any(item.lower() in job_posting.lower() for item in keyword_title) or any(item in job_posting for item in keyword_title2)) and not any(item.lower() in job_posting.lower() for item in not_keywords):
                            job_link.append(self.driver.find_element(By.XPATH, f"(//div[contains(@class,'cust-job-tuple layout-wrapper lay-2 sjw__tuple')])[{j+1}]/div[1]/a").get_attribute('href'))
                            job_title.append(job_posting)

                except Exception as e1:
                    print_err1.append([f'page_{i}_post{j+1}',e1])

                percent_complete = (i / len(set(new_curls))) * 100
                print(f"Progress: {percent_complete:.2f}%\r", end='')

                i += 1

            if i == len(new_curls):
                print("Progress: 100.00%")
        
        except Exception as e:
            print(e)
        
        job_df = pd.DataFrame({'Title' : job_title, 'URL' : job_link})
        return job_df
    
    def get_keyskill_for_dfs(self, df):
        main_skill = []
        for joburl in df.URL.values: 
            self.driver.get(joburl)
            dicti = {1: "div[contains(@class,'key-skill')]", 2: "div[contains(@class,'getJobKeySkillsSection key-skill')]", 3: "div[contains(@class,'styles_key-skill__GIPn_')]"}
            for loc in dicti:
                try:
                    keyskills = ','.join([i.text for i in self.driver.find_elements(By.XPATH, f"//{dicti[loc]}/div/a/span")])
                    highlighted = self.driver.find_elements(By.XPATH, f"//{dicti[loc]}/div/a/i" if dicti[loc] == "div[contains(@class,'styles_key-skill__GIPn_')]" else f"//{dicti[loc]}/div/a/em")
                    highlighted_count = len(highlighted)
                except Exception as e:
                    highlighted_count = 0
            
            try:
                jd = self.driver.find_element(By.XPATH,"//div[@class='styles_JDC__dang-inner-html__h0K4t']").text
                jhights_list = self.driver.find_elements(By.XPATH,"(//div[@class='styles_JDC__match-score__VnjLL'])/ul/li")
                jhights = '\n'.join([jh.text for jh in jhights_list])
            except:
                jd = 'NA'
                jhights = 'NA'
            try:
                job_age = self.driver.find_element(By.XPATH, "//div[@class='styles_jhc__jd-stats__KrId0']/span[1]/span").text
                applycount = self.driver.find_element(By.XPATH, "//div[@class='styles_jhc__jd-stats__KrId0']/span[3]/span").text
            except NoSuchElementException:
                try:
                    job_age = self.driver.find_element(By.XPATH, "//div[@class='sumFoot']/span[1]/strong").text
                    applycount = self.driver.find_element(By.XPATH, "//div[@class='sumFoot']/span[2]/strong").text
                except NoSuchElementException:
                    try:
                        job_age = self.driver.find_element(By.XPATH, "//section[@id='job_header']/div[2]/div[1]/span[1]/span").text
                        applycount = self.driver.find_element(By.XPATH, "//section[@id='job_header']/div[2]/div[1]/span[3]/span").text
                    except NoSuchElementException:
                        # Handle the case where none of the XPaths matched
                        job_age = 'NA'
                        applycount = 'NA'
            try:
                match_score = [ms.get_attribute('class') for ms in self.driver.find_elements(By.XPATH, "//div[@class='styles_JDC__match-score__VnjLL']//i")]
                Early_Applicant = (1 if 'circle' in match_score[0] else 0) if len(match_score) != 0 else 'NA'
                Keyskills = (1 if 'circle' in match_score[1] else 0) if len(match_score) != 0 else 'NA'
                Location = (1 if 'circle' in match_score[2] else 0) if len(match_score) != 0 else 'NA'
                Work_Experience = (1 if 'circle' in match_score[3] else 0) if len(match_score) != 0 else 'NA'
            except:
                Early_Applicant = 'NA'
                Keyskills = 'NA'
                Location = 'NA'
                Work_Experience = 'NA'

            try:
                button = self.driver.find_element(By.XPATH, "//button[2]")
                main_skill.append((keyskills, highlighted_count, button.text, 
                                   joburl, job_age, applycount, Early_Applicant, 
                                   Keyskills, Location, Work_Experience, jd, jhights))
            except:
                main_skill.append((keyskills, highlighted_count, "Not Possible", 
                                   joburl, job_age, applycount, Early_Applicant, 
                                   Keyskills, Location, Work_Experience, jd, jhights))

        apply_df = pd.DataFrame(main_skill, columns=['Skills', 'Highlighted', 'Response', 'URL', 
                                                     'Job_age', 'candi_applied', 'Early Applicant', 
                                                     'Keyskills', 'Location', 'Work Experience', 
                                                     'Job Description', 'Job Highlights'])
        
        apply_df = pd.merge(left=df, right=apply_df, on='URL', how='inner')

        return apply_df


class AutoApply:
    def __init__(self, user, passcode, URLS, path):
        self.passcode = passcode
        self.user = user
        self.URLS = URLS
        self.path = path
        self.naukri = "https://www.naukri.com"
        self.log_in_layer = (By.XPATH, "//a[@id='login_Layer']")
        self.username_details = (By.XPATH, "//input[@placeholder='Enter your active Email ID / Username']")
        self.password_details = (By.XPATH, "//input[@placeholder='Enter your password']")
        self.log_in_click = (By.XPATH, "//button[@type='submit']")
        self.driver = webdriver.Chrome()
        self.driver.get(self.naukri)
        self.wait = WebDriverWait(self.driver,15)
        print(f'we visit {len(URLS)} job posting today')
    
    def login_account(self):
        self.wait.until(EC.element_to_be_clickable(self.log_in_layer)).click()
        self.wait.until(EC.visibility_of_element_located(self.username_details)).send_keys(self.user)
        self.wait.until(EC.visibility_of_element_located(self.password_details)).send_keys(self.passcode)
        self.wait.until(EC.element_to_be_clickable(self.log_in_click)).click()

    def apply_to_links(self):
        self.login_account()
        time.sleep(2)
        not_possible = []
        applied = 0
        in_applie = 0 
        er=[]
        inpu = []

        for url in self.URLS:
            self.driver.get(url)
            try:
        # Wait up to 10 seconds for the button to be clickable
                WebDriverWait(self.driver, 10).until(EC.element_to_be_clickable((By.XPATH, "//button[2]")))
                button = self.driver.find_element(By.XPATH, "//button[2]")
                if button.text == 'Apply':
                    try:
                        button.click()
                        applied +=1
                        time.sleep(1)
                        self.wait.until(EC.visibility_of_all_elements_located((By.XPATH,"//div[@class='chatbot_DrawerContentWrapper']")))
                        if self.driver.find_element(By.XPATH,"//div[@class='chatbot_DrawerContentWrapper']").is_displayed() == True:
                            inpu.append([url,'requires input'])
                        in_applie +=1
                    except:
                        pass
                           
                else:
                    not_possible.append([url, button.text])
            except Exception as e:
                er.append([url,e])
            
        not_possible_df = pd.DataFrame(not_possible)
        er_df =  pd.DataFrame(er)
        detail_req = pd.DataFrame(inpu)
        
        
        print(f'clicked on {applied} jobs')
        print(f'properly applied are {applied-in_applie} jobs')
        print(f'manual operation for {in_applie} posting')

        current_datetime = datetime.datetime.now()
        formatted_datetime = current_datetime.strftime("%d%m%y_%I%M%p")

        filename = formatted_datetime+'.csv'
        erfilename = formatted_datetime+'_er.csv'
        detail_filename = formatted_datetime+'_detail.csv'
        
        save_path_filename = os.path.join(self.path,filename)
        save_path_erfilename = os.path.join(self.path,erfilename)
        save_path_detail_filename = os.path.join(self.path,detail_filename)
        
        if len(not_possible_df) !=0:
            not_possible_df.to_csv(save_path_filename,index=False)
        if len(er_df) !=0:
            er_df.to_csv(save_path_erfilename,index=False)
        if len(detail_req) !=0:
            detail_req.to_csv(save_path_detail_filename,index=False)
